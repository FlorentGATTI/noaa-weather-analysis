name: CD

on:
  push:
    branches: [main]
    tags:
      - "v*"

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: your-dockerhub-username/noaa-weather-analysis
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=sha

      - name: Build and push Docker images
        run: |
          # Build and push each service
          for service in frontend backend hbase namenode datanode spark; do
            docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/noaa-$service:${{ github.sha }} ./$service
            docker push ${{ secrets.DOCKERHUB_USERNAME }}/noaa-$service:${{ github.sha }}
          done

      - name: Deploy to production
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          echo "Deploying version ${{ github.ref_name }} to production"

          # Update version tags
          for service in frontend backend hbase namenode datanode spark; do
            docker tag ${{ secrets.DOCKERHUB_USERNAME }}/noaa-$service:${{ github.sha }} \
                      ${{ secrets.DOCKERHUB_USERNAME }}/noaa-$service:${{ github.ref_name }}
            docker push ${{ secrets.DOCKERHUB_USERNAME }}/noaa-$service:${{ github.ref_name }}
          done

      - name: Update deployment status
        if: always()
        uses: chrnorm/deployment-status@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          state: ${{ job.status }}
          deployment-id: ${{ steps.deployment.outputs.deployment_id }}

  notify:
    needs: deploy
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Notify deployment status
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_COLOR: ${{ job.status == 'success' && 'good' || 'danger' }}
          SLACK_TITLE: Deployment ${{ job.status }}
          SLACK_MESSAGE: "Deployment of version ${{ github.ref_name }} ${{ job.status }}"
